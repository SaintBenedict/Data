<?xml version="1.0" encoding="utf-8" ?>
<Defs>

  <QuestScriptDef>
    <defName>ThreatReward_Manhunters_ItemPod</defName>
    <rootSelectionWeight>0.7</rootSelectionWeight>
    <rootMinPoints>0</rootMinPoints>
    <rootMinProgressScore>4</rootMinProgressScore>
    <expireDaysRange>1~2</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName(animalCount==1)->The [AdjectiveBadass] [beast]</li>
        <li>questName(animalCount==1)->A [AdjectiveBadass] [beast]</li>
        <li>questName(animalCount==1)->[AdjectiveBadass] [beast]</li>
        <li>questName(animalCount>=2)->The [AdjectiveBadass] [beasts]</li>
        <li>questName(animalCount>=2)->[AdjectiveBadass] [beasts]</li>

        <li>beast(p=4)->[animalKind_label]</li>
        <li>beast->beast</li>
        <li>beast->animal</li>

        <li>beasts(p=4)->[animalKind_labelPlural]</li>
        <li>beasts->beasts</li>
        <li>beasts->animals</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- General use -->
        <li>animalKindLabelCorrect(animalCount==1)->manhunting [animalKind_label]</li>
        <li>animalKindLabelCorrect(animalCount>=2)->[animalCount] manhunting [animalKind_labelPlural]</li>
        <li>manhuntingBeastIndef(animalCount==1)->a manhunting [animalKind_label]</li>
        <li>manhuntingBeastIndef(animalCount>=2)->a pack of [animalCount] manhunting [animalKind_labelPlural]</li>
        <li>endSection->The pods contain (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]
\n[helpersParagraph]If you accept, the [animalKindLabelCorrect] will arrive at [map_definite] in [manhuntersDelayTicks_duration]. [allRewardsDescriptionsExceptItems]</li>

        <!-- Asker is null, single animal -->
        <li>questDescription(askerIsNull==true,animalCount==1)->A trader is calling from near [map_definite]. A wild [animalKind_label] is hunting him! He wants to draw the beast away from him - and towards you.
\nThe trader promises to send transport pods in return. [endSection]</li>
        <li>manhunterArrivalLetterEnd(askerIsNull==true,animalCount==1)->The [animalKind_label] was hunting a nearby trader, but was drawn to you by transport pods.</li>

        <!-- Asker is null, multiple animals -->
        <li>questDescription(askerIsNull==true,animalCount>=2)->A trader is calling from near [map_definite]. A pack of [animalCount] wild [animalKind_labelPlural] are hunting him! He wants to draw the animals away from him - and towards you.
\nThe trader promises to send transport pods in return. [endSection]</li>
        <li>manhunterArrivalLetterEnd(askerIsNull==true,animalCount>=2)->The [animalKind_labelPlural] were hunting a nearby trader, but were drawn to you by transport pods.</li>

        <!-- Asker is faction leader, single animal OR multiple animals -->
        <li>questDescription(asker_factionLeader==True)->Caravans of [asker_faction_name] near [map_definite] are being harassed by [manhuntingBeastIndef]. [asker_faction_leaderTitle] [asker_nameFull] wants to draw the [animalKindLabelCorrect] away from the caravans and towards [map_definite] to be dealt with.
\n[asker_nameDef] promises to send you transport pods as a reward. [endSection]</li>
        <li>manhunterArrivalLetterEnd(asker_factionLeader==True,animalCount==1)->The [animalKind_label] was harassing caravans from [asker_faction_name], but was drawn to you by transport pods.</li>
        <li>manhunterArrivalLetterEnd(asker_factionLeader==True,animalCount>=2)->The [animalKind_labelPlural] were harassing caravans from [asker_faction_name], but were drawn to you by transport pods.</li>

        <!-- Asker is royal, single animal -->
        <li>questDescription(asker_royalInCurrentFaction==True,animalCount==1)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], is bored. [asker_pronoun] wants to observe how backwards people like you deal with a deadly threat. To satisfy [asker_possessive] desire, [asker_possessive] servants will release a manhunting [animalKind_label] to attack you. The [asker_royalTitleInCurrentFaction] will observe the fight via high-altitude drone.
\nIn return for your agreement, [asker_pronoun] will send transport pods. [endSection]</li>
        <li>manhunterArrivalLetterEnd(asker_royalInCurrentFaction==True,animalCount==1)->This [animalKind_label] was released by [asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], to ease [asker_possessive] boredom.</li>

        <!-- Asker is royal, multiple animals -->
        <li>questDescription(asker_royalInCurrentFaction==True,animalCount>=2)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], is bored. [asker_pronoun] wants to observe how backwards people like you deal with a deadly threat. To satisfy [asker_possessive] desire, [asker_possessive] servants will release a pack of [animalCount] manhunting [animalKind_labelPlural] to attack you. The [asker_royalTitleInCurrentFaction] will observe the fight via high-altitude drone.
\nIn return for your agreement, [asker_pronoun] will send transport pods. [endSection]</li>                
        <li>manhunterArrivalLetterEnd(asker_royalInCurrentFaction==True,animalCount>=2)->These [animalKind_labelPlural] were released by [asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], to ease [asker_possessive] boredom.</li>      
        
      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
        </li>
        <li Class="QuestNode_GetMap" />

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>

        <!-- Note that we generate the reward value from the input points after challenge rating is applied, but before helper points are added
             We could try to change this to some curve based on the animals generated, but it's not clear how to apply helper points to that and it
             may not be necessary to get that complex. -->
        <li Class="QuestNode_SubScript">
          <def>Util_GetDefaultRewardValueFromPoints</def>
        </li>

        <!-- Helpers -->
        <li Class="QuestNode_SubScript">
          <def>Util_MaybeGenerateHelpers</def>
          <parms>
            <helpersChance>0.4</helpersChance>
            <sendArrivalLetter>true</sendArrivalLetter>
          </parms>
        </li>
        <!-- Add helpers power to points -->
        <li Class="QuestNode_Set">
          <name>points</name>
          <value>$($points + $helpersPoints)</value>
        </li>
        
        <!-- Manhunter pack -->
        <li Class="QuestNode_Set">
          <name>signalTag</name>
          <value>manhunter</value>
        </li>
        <li Class="QuestNode_Set">
          <name>manhuntersDelayTicks</name>
          <value>$(roundToTicksRough(randInt(300, 60000)))</value>
        </li>
        <li Class="QuestNode_Delay">
          <delayTicks>$manhuntersDelayTicks</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_ManhunterPack">
                <tag>$signalTag</tag>
                <customLetterText>{BASETEXT}\n\n[manhunterArrivalLetterEnd]</customLetterText>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>ManhuntersArrived</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Track manhunters mental state -->
        <li Class="QuestNode_TrackWhenExitMentalState">
          <tag>$signalTag</tag>
          <mentalStateDef>ManhunterPermanent</mentalStateDef>
          <inSignals>
            <li>$signalTag.Despawned</li>
            <li>$signalTag.ExitMentalState</li>
          </inSignals>
          <outSignal>ManhuntersNeutralized</outSignal>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>ManhuntersArrived</li>
            <li>ManhuntersNeutralized</li>
          </inSignals>
          <node Class="QuestNode_Delay">
            <delayTicks>300</delayTicks>
            <node Class="QuestNode_Sequence">
              <nodes>
                <li Class="QuestNode_GiveRewards">
                  <parms>
                    <allowGoodwill>true</allowGoodwill>
                    <allowRoyalFavor>true</allowRoyalFavor>
                    <thingRewardRequired>true</thingRewardRequired>
                    <thingRewardItemsOnly>true</thingRewardItemsOnly>
                  </parms>
                </li>
                <li Class="QuestNode_End" />
              </nodes>
            </node>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

  <QuestScriptDef>
    <defName>ThreatReward_Infestation_ItemPod</defName>
    <rootSelectionWeight>1.0</rootSelectionWeight>
    <rootMinPoints>220</rootMinPoints> <!-- Cost of 1 hive -->
    <rootMinProgressScore>4</rootMinProgressScore>
    <expireDaysRange>4~8</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName->Pods and [insects]</li>
        <li>questName->[asker_nameDef]'s [insects]</li>
        <li>questName->The [itemPodsTotalMarketValue_money] [insects]</li>
        <li>questName(asker_royalInCurrentFaction==True)->Spectacle of [insects]</li>
        <li>questName(p=0.3)->Podswarm</li>

        <li>insects->insects</li>
        <li>insects->bugs</li>
        <li>insects->hives</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- Asker is null -->
        <li>questDescription(askerIsNull==true)->An orbiting research ship wants to test a new type of insect pheromone. If you agree, they'll sweep [map_definite] with pheromones, provoking an infestation of [hivesCount] hives.
\nIn exchange, the ship will send transport pods containing (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]</li>
        <li>infestationArrivalLetterText(askerIsNull==true)->The hives were attracted by a pheromone sweep from an orbiting research ship.</li>

        <!-- Asker is faction leader -->
        <li>questDescription(asker_factionLeader==True)->[asker_nameFull], [asker_faction_leaderTitle] of [asker_faction_name], is facing repeated infestations at sites near [map_definite]. [asker_pronoun] wants to draw the infestations to you, and offers to reward you with some items via drop pod. The pods contain (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]
\n[helpersParagraph]If you accept, an infestation of [hivesCount] hives will begin. [allRewardsDescriptionsExceptItems]</li>
        <li>infestationArrivalLetterText(asker_factionLeader==True)->The hives were originally infesting nearby sites belonging to [asker_nameFull] of [asker_faction_name].</li>
  
        <!-- Asker is royal -->
        <li>questDescription(asker_royalInCurrentFaction==True)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], wishes to watch how you fight an infestation for the purposes of entertainment. [asker_pronoun] seeks your permission to drop insect pheromone bombs on [map_definite] to provoke an infestation of [hivesCount] hives. [asker_pronoun] will watch via high-altitude drone.
\nIn return, [asker_pronoun] offers to send resource pods containing (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]
\n[helpersParagraph][allRewardsDescriptionsExceptItems]</li>
        <li>infestationArrivalLetterText(asker_royalInCurrentFaction==True)->The infestation was instigated by [asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], for [asker_possessive] entertainment.</li>

      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
        </li>
        <li Class="QuestNode_GetMap">
          <mustBeInfestable>true</mustBeInfestable>
        </li>

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>

        <!-- Note that we generate the reward value from the input points after challenge rating is applied, but before helper points are added
             We could try to change this to some curve based on the number of hives generated, but it's not clear how to apply helper points to that and it
             may not be necessary to get that complex. -->
        <li Class="QuestNode_SubScript">
          <def>Util_GetDefaultRewardValueFromPoints</def>
        </li>

        <!-- Helpers -->
        <li Class="QuestNode_SubScript">
          <def>Util_MaybeGenerateHelpers</def>
          <parms>
            <helpersChance>0.4</helpersChance>
            <sendArrivalLetter>true</sendArrivalLetter>
          </parms>
        </li>
        <li Class="QuestNode_Set">
          <name>points</name>
          <value>$($points + $helpersPoints)</value>
        </li>

        <!-- Start infestation after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>$(randInt(720,1200))</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_Infestation</def>
                <parms>
                  <tag>infestation</tag>
                  <customLetterText>{BASETEXT}\n\n[infestationArrivalLetterText]</customLetterText>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>InfestationStarted</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>InfestationStarted</li>
            <li>infestation.AllHivesDestroyed</li>
          </inSignals>
          <node Class="QuestNode_Delay">
            <delayTicks>300</delayTicks>
            <node Class="QuestNode_Sequence">
              <nodes>
                <li Class="QuestNode_GiveRewards">
                  <parms>
                    <allowGoodwill>true</allowGoodwill>
                    <allowRoyalFavor>true</allowRoyalFavor>
                    <thingRewardRequired>true</thingRewardRequired>
                    <thingRewardItemsOnly>true</thingRewardItemsOnly>
                  </parms>
                </li>
                <li Class="QuestNode_End" />
              </nodes>
            </node>
          </node>
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

  <QuestScriptDef>
    <defName>ThreatReward_GameCondition_ItemPod</defName>
    <rootSelectionWeight>0.7</rootSelectionWeight>
    <rootMinPoints>0</rootMinPoints>
    <expireDaysRange>4~8</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName->[asker_nameDef]'s [gameCondition_label]</li>
        <li>questName->[gameCondition_indefinite] for [asker_nameDef]</li>
        <li>questName->Paid [gameCondition_label]</li>
        <li>questName->[gameCondition_label] for Pay</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- Asker is null -->
        <li>questDescription(askerIsNull==true)->A machine persona in an orbiting ship wants to perform some planetary experiments. However, he is concerned about getting in trouble with the ethical review board, since his experiment will cause unfortunate side-effects.
\nIf he carries out his experiment, [gameConditionDescriptionFuture].
\nIn exchange for your consent, he offers to send some items to [map_definite] via transport pod (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]
\n[allRewardsDescriptionsExceptItems]</li>

        <!-- Asker is faction leader -->
        <li>questDescription(asker_factionLeader==True)->[asker_faction_name] is threatened by an rogue machine persona. Their leader, [asker_nameFull], wants you to send a message to the persona accepting responsibility for their flaws. If you do, the persona will punish you instead, and [gameConditionDescriptionFuture].
\nIn thanks, [asker_nameDef] will send items to [map_definite] via transport pod (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]
\n[allRewardsDescriptionsExceptItems]</li>

        <!-- Asker is royal -->
        <li>questDescription(asker_royalInCurrentFaction==True)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], wants to watch how you primitive surface-dwellers deal with catastrophe. [asker_pronoun] proposes an artifical disaster for you: [gameConditionDescriptionFuture]. [asker_nameDef] will watch via high-altitude drone.
\nAs compensation, [asker_pronoun] will send items to [map_definite] in reward (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]
\n[allRewardsDescriptionsExceptItems]</li>
        
      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
          <parms>
            <selectionWeightOneStar>0.4</selectionWeightOneStar>
            <selectionWeightTwoStar>0.3</selectionWeightTwoStar>
            <selectionWeightThreeStar>0.3</selectionWeightThreeStar>
            <pointsFactorTwoStar>1</pointsFactorTwoStar> <!-- Don't change points -->
            <pointsFactorThreeStar>1</pointsFactorThreeStar>
            <minPointsTwoStar>400</minPointsTwoStar>
            <minPointsThreeStar>600</minPointsThreeStar>
          </parms>
        </li>
        <li Class="QuestNode_GetMap" />

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>

        <!-- Begin the game condition after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>600</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_GameConditionNegativeRandom</def>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>GameConditionStarted</outSignals>
              </li>
            </nodes>
          </node>
      </li>

        <!-- Calculate reward value
             Note the reward value is curved by points, but the challenge ignores points
             This is because any colony can take nearly any condition, but conditions do more damage to big colonies -->
        <li Class="QuestNode_EvaluateSimpleCurve">
          <value>$points</value>
          <storeAs>pointsRewardFactor</storeAs>
          <curve>
            <points>
              <li>300,  0.5</li>
              <li>1200, 1.0</li>
              <li>2400, 1.5</li>
              <li>5000, 2.0</li>
            </points>
          </curve>
        </li>
        <li Class="QuestNode_Set">
          <name>rewardValue</name>
          <value>$($gameConditionDifficulty * ($gameConditionDuration / 60000) * $pointsRewardFactor * 200)</value>
        </li>

        <!-- Give reward after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>1200</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_GiveRewards">
                <parms>
                  <allowGoodwill>true</allowGoodwill>
                  <allowRoyalFavor>true</allowRoyalFavor>
                  <thingRewardRequired>true</thingRewardRequired>
                  <thingRewardItemsOnly>true</thingRewardItemsOnly>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>RewardGiven</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>RewardGiven</li>
            <li>GameConditionStarted</li>
          </inSignals>
          <node Class="QuestNode_End" />
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

  <QuestScriptDef>
    <defName>ThreatReward_SiteThreat_ItemPod</defName>
    <rootSelectionWeight>1.0</rootSelectionWeight>
    <rootMinPoints>350</rootMinPoints>
    <rootMinProgressScore>7</rootMinProgressScore>
    <expireDaysRange>1~2</expireDaysRange>
    <canGiveRoyalFavor>true</canGiveRoyalFavor>
    <questNameRules>
      <rulesStrings>
        <li>questName->[asker_nameDef]'s [site/site_label]</li>
        <li>questName->[site/site_label] for [asker_nameDef]</li>
        <li>questName->Paid [site/site_label]</li>
        <li>questName->[site/site_label] for Pay</li>
      </rulesStrings>
    </questNameRules>
    <questDescriptionRules>
      <rulesStrings>

        <!-- Asker is null -->
        <li>questDescription(askerIsNull==true)->A trader is calling from nearby. [threat] are hunting him! He is asking you to signal them and draw them towards [map_definite] so he can escape. If you send the signal, [askerEnemies] will activate a site nearby to harass you. [site/allSitePartsDescriptions] This site will remain until you go destroy it.
\nIn thanks, the trader will send you the following goods via transport pod (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]</li>

        <!-- Asker is faction leader -->
        <li>questDescription(asker_factionLeader==True)->[asker_nameFull], [asker_faction_leaderTitle] of [asker_faction_name], is asking for your help. [askerEnemies] have been harassing [asker_possessive] settlements. [asker_pronoun] wants your help using signals to draw them towards [map_definite] and away from [asker_possessive] people.
\nIf [asker_pronoun] does, [askerEnemies] will activate a site nearby to harass you. [site/allSitePartsDescriptions] This site will remain until you go destroy it.
\nIn reward, you'll recieve pods containing (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]
\n[allRewardsDescriptionsExceptItems]</li>

        <!-- Asker is royal -->
        <li>questDescription(asker_royalInCurrentFaction==True)->[asker_nameFull], a [asker_royalTitleInCurrentFaction] of [asker_faction_name], is traveling near [map_definite]. [asker_pronoun] is being followed by [threat] and wants your help using signals to draw them towards [map_definite].
\nIf you do, [askerEnemies] will activate a site nearby to harass you. [site/allSitePartsDescriptions] This site will remain until you go destroy it.
\n[asker_nameDef] will reward you. [allRewardsDescriptionsExceptItems] You'll recieve pods containing (total value [itemsReward_totalMarketValue_money]):
\n[itemsReward_items]</li>

        <li>threat(priority=1,site/Outpost_exists==True)->[site/enemyFaction_pawnsPlural] of [site/enemyFaction_name]</li>
        <li>threat(priority=1,site/MechCluster_exists==True)->mechanoids</li>
        <li>threat(priority=1,site/SleepingMechanoids_exists==True)->mechanoids</li>
        <li>threat->[asker_possessive] enemies</li>
        <li>threat(priority=-1)->his enemies</li>
        <li>askerEnemies(priority=1,site/Outpost_exists==True)->[site/enemyFaction_name]</li>
        <li>askerEnemies(priority=1,site/MechCluster_exists==True)->mechanoids</li>
        <li>askerEnemies(priority=1,site/SleepingMechanoids_exists==True)->mechanoids</li>
        <li>askerEnemies->[asker_possessive] enemies</li>
        <li>askerEnemies(priority=-1)->his enemies</li>
      </rulesStrings>
    </questDescriptionRules>
    <root Class="QuestNode_Sequence">
      <nodes>
        <li Class="QuestNode_SubScript">
          <def>Util_RandomizePointsChallengeRating</def>
          <parms>
            <selectionWeightOneStar>0.4</selectionWeightOneStar>
            <selectionWeightTwoStar>0.35</selectionWeightTwoStar>
            <selectionWeightThreeStar>0.25</selectionWeightThreeStar>
          </parms>
        </li>
        <li Class="QuestNode_GetMap" />

        <!-- Choose asker -->
        <li Class="QuestNode_SubScript">
          <def>Util_DecideRandomAsker</def>
        </li>
        
        <!-- Determine enemy faction -->
        <li Class="QuestNode_GetFaction">
          <storeAs>site/enemyFaction</storeAs>
          <allowEnemy>true</allowEnemy>
          <mustBeHostileToFactionOf>$asker</mustBeHostileToFactionOf>
        </li>

        <!-- Spawn the threat site after delay -->
        <li Class="QuestNode_Delay">
          <delayTicks>600</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_SubScript">
                <def>Util_SpawnSiteThreat</def>
                <prefix>site</prefix>
                <parms>
                  <inSignal>$inSignal</inSignal>
                  <map>$map</map>
                  <points>$points</points>
                  <customLetterText>[defaultSiteAppearedLetterText]\n\nThis site was set up as a response to your insulting signals.</customLetterText>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>SiteAppeared</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- Calculate rewardValue -->
        <li Class="QuestNode_GetSiteDisturbanceFactor">
          <storeAs>activeThreatDisturbanceFactor</storeAs>
          <sitePartDefs>$site/sitePartDefs</sitePartDefs>
        </li>
        <li Class="QuestNode_SubScript">
          <def>Util_GetDefaultRewardValueFromPoints</def>
          <parms>
            <!-- Value is reduced because not all points go into real threats, some go into the condition causer
                 But it's then increased because of fighting away from home. -->
            <points>$($points * 0.75 * 1.4)</points>
          </parms>
        </li>
        <li Class="QuestNode_Set">
          <name>rewardValue</name>
          <value>$($rewardValue * $activeThreatDisturbanceFactor)</value>
        </li>

        <!-- Give reward after delay -->
        <li Class="QuestNode_Delay">
        <delayTicks>1200</delayTicks>
          <node Class="QuestNode_Sequence">
            <nodes>
              <li Class="QuestNode_GiveRewards">
                <parms>
                  <allowGoodwill>true</allowGoodwill>
                  <allowRoyalFavor>true</allowRoyalFavor>
                  <thingRewardRequired>true</thingRewardRequired>
                  <thingRewardItemsOnly>true</thingRewardItemsOnly>
                </parms>
              </li>
              <li Class="QuestNode_SendSignals">
                <outSignals>RewardGiven</outSignals>
              </li>
            </nodes>
          </node>
        </li>

        <!-- End -->
        <li Class="QuestNode_AllSignals">
          <inSignals>
            <li>RewardGiven</li>
            <li>SiteAppeared</li>
          </inSignals>
          <node Class="QuestNode_End" />
        </li>
      </nodes>
    </root>
  </QuestScriptDef>

</Defs>